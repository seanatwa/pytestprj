"""
Our company hosts search bars on a number of websites.
One of our important datasets is searches,
which has columns: search_id | site_id
The search_id is unique.
In the example below, two searches were made on the same site.
"""

searches = [
    {"search_id": 0, "site_id": 0},
    {"search_id": 1, "site_id": 0},
]

"""
The other important dataset is clicks,
which has columns search_id | position
In the example below:
- In query 0, only the top result was clicked
- In query 1, results in position 4 and 5 were clicked
"""

clicks = [
    {"search_id": 0, "position": 0},
    {"search_id": 1, "position": 4},
    {"search_id": 1, "position": 5},
]

"""
We want to start measuring the following metric:
For each site, in what percent of queries:
- The top result was clicked (position 0) AND
- Nothing else was clicked
In our examples above, we have one site with two queries.
The first query only got a click on position 0, so it
contributes to this metric. The second query got clicks on
position 4 and 5, so it does not. The output would be:
"""

top_result_ctr = [
    {"site_id": 0, "pct": 0.5}
]




# Test case 0_0
expected_top_result_ctr = []
assert expected_top_result_ctr == 
            compute_ctr([], 
                        []) 


# Test case 0_1
expected_top_result_ctr = []
assert expected_top_result_ctr == 
            compute_ctr([{"search_id": 0, "site_id": 0}], 
                        []) 


# Test case 0_2
expected_top_result_ctr = []
assert expected_top_result_ctr == 
            compute_ctr([], 
                        [{"search_id": 0, "position": 0}]) 
    

# Test case 1_1
expected_top_result_ctr = [{"site_id": 0, "pct": 1.0}]
#assert expected_top_result_ctr == 
            compute_ctr([{"search_id": 0, "site_id": 0}], 
                        [{"search_id": 0, "position": 0}]) 


# Test case 1_2
expected_top_result_ctr = [{"site_id": 0, "pct": 0.0}]
input_search = [{"search_id": 0, "site_id": 0},
               ]
input_click = [{"search_id": 0, "position": 0},
               {"search_id": 0, "position": 4},
               {"search_id": 0, "position": 5},
              ] 
assert expected_top_result_ctr == compute_ctr(input_search, input_click)) 


# Test case 1_3
# Same site, multiple searchies, both top
expected_top_result_ctr = [{"site_id": 0, "pct": 1.0}]
input_search = [{"search_id": 0, "site_id": 0},
                {"search_id": 1, "site_id": 0},
               ]
input_click = [{"search_id": 0, "position": 0},
               {"search_id": 1, "position": 0},
              ] 
assert expected_top_result_ctr == compute_ctr(input_search, input_click)) 


# Test case 1_4
# Same site, multiple searchies, 1 out 2 hit top
expected_top_result_ctr = [{"site_id": 0, "pct": 0.5}]
input_search = [{"search_id": 0, "site_id": 0},
                {"search_id": 1, "site_id": 0},
               ]
input_click = [{"search_id": 0, "position": 0},
               {"search_id": 1, "position": 4},
              ] 
assert expected_top_result_ctr == compute_ctr(input_search, input_click)) 

